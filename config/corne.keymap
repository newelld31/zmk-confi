#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/international_chars/german.dtsi"
#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"

/* layer and key shortcuts */

#define ___ &trans

#define DEF 0  // layer shortcuts, must match order in which they are defined below
#define NUM 1
#define FUN 2

/* custom behaviors */

// homerow mods
ZMK_BEHAVIOR(hrm, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <125>;
    bindings = <&kp>, <&kp>;
)

// tap: sticky shift | double tap: capsword
ZMK_BEHAVIOR(ss_cw, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&sk LSHFT>, <&caps_word>;
)

// tap: backspace | shift + tap: delete | hold: num layer
ZMK_BEHAVIOR(bs_del_num, mod_morph,
    bindings = <&lt NUM BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// windows sleep macro
ZMK_BEHAVIOR(win_sleep, macro,
    wait-ms = <100>;
    tap-ms = <5>;
    bindings = <&kp LG(X) &kp U &kp S>;
)

/* Global settings */

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};


/* Nav cluster */

// long-tap action on hold, short-tap action on all interrupts
#define MT_CORE \
    flavor = "tap-preferred"; \
    tapping-term-ms = <220>; \
    quick-tap-ms = <220>; \
    hold-trigger-key-positions = <0>;

&mt { MT_CORE };
ZMK_BEHAVIOR(mt_home, hold_tap, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_BEHAVIOR(mt_end,  hold_tap,  bindings = <&masked_end>, <&kp>; MT_CORE)

#define NAV_LEFT  &mt_home 0   LEFT    // tap: left  | long-tap: beginning of line
#define NAV_RIGHT &mt_end 0    RIGHT   // tap: right | long-tap: end       of line
#define NAV_UP    &mt LC(HOME) UP      // tap: up    | long-tap: beginning of document
#define NAV_DOWN  &mt LC(END)  DOWN    // tap: down  | long-tap: end       of document
#define NAV_BSPC  &mt LC(BSPC) BSPC    // tap: bspc  | long-tap: delete word backward
#define NAV_DEL   &mt LC(DEL)  DEL     // tap: del   | long-tap: delete word forward

// mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
#define MASK_MODS(NAME, MODS, BINDING) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        bindings = <BINDING>, <BINDING>; \
        mods = <MODS>; \
    )
MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

// combos
/*                KEY POSITIONS

  ╭─────────────────────────╮ ╭─────────────────────────╮
  │ LT5 LT4 LT3 LT2 LT1 LT0 │ │ RT0 RT1 RT2 RT3 RT4 RT5 │
  │ LM5 LM4 LM3 LM2 LM1 LM0 │ │ RM0 RM1 RM2 RM3 RM4 RM5 │
  │ LB5 LB4 LB3 LB2 LB1 LB0 │ │ RB0 RB1 RB2 RB3 RB4 RB5 │
  ╰───────────╮ LH2 LH1 LH0 │ │ RH0 RH1 RH2 ╭───────────╯#
              ╰─────────────╯ ╰─────────────╯ */
          
#undef COMBO_TERM
#define COMBO_TERM 40  // timeout of 40ms (default is 30ms if omitted)
ZMK_COMBO(enter, &kp ENTER, LM0 LM1, ALL)
ZMK_COMBO(Save, &kp LC(S), LH1 LH0, ALL)
ZMK_COMBO(Capsword, &ss_cw, LT1 LT2 LT3, ALL)
ZMK_COMBO(esc, &kp ESC, LT1 LT2, ALL)
ZMK_COMBO(semicolon, &kp SEMICOLON, RT1 RT2, ALL)
ZMK_COMBO(colon, &kp COLON, RT1 RT2 RT3, ALL)
ZMK_COMBO(dot, &kp DOT, RM1 RM2, ALL)
ZMK_COMBO(comma, &kp COMMA, RM1 RM2 RM3, ALL)
ZMK_COMBO(par, &par, RB1 RB2, ALL)
ZMK_COMBO(bracket, &br, RB1 RB2 RB3, ALL)
ZMK_COMBO(slash, &sla, LB1 LB2, ALL)
ZMK_COMBO(undo, &kp LC(Z), LB3 LB4, ALL)
ZMK_COMBO(copy, &kp LC(C), LM1 LB1, ALL)
ZMK_COMBO(cut, &kp LC(X), LM1 LT1, ALL)
ZMK_COMBO(paste, &kp LC(V), LM0 LB0, ALL)
ZMK_COMBO(back, NAV_BSPC, LM4 LM3, ALL)
ZMK_COMBO(up, NAV_UP, LT2 LM2, ALL)
ZMK_COMBO(down, NAV_DOWN, LM2 LB2, ALL)
ZMK_COMBO(right, NAV_RIGHT, LM1 LM2, ALL)
ZMK_COMBO(left, NAV_LEFT, LM2 LM3, ALL)
ZMK_COMBO(pgup, &kp PAGE_UP, LT3 LM3, ALL)
ZMK_COMBO(pgdown, &kp PAGE_DOWN, LB3 LM3, ALL)
ZMK_COMBO(zoomin, &kp LC(EQUAL), LT4 LM4, ALL)
ZMK_COMBO(zoomout, &kp LC(MINUS), LM4 LB4, ALL)
ZMK_COMBO(tab, &kp TAB, LB1 LB0, ALL)
ZMK_COMBO(caps, &kp CAPS, LT4 LT3, ALL)
ZMK_COMBO(mult, &kp STAR, LT0 LM0, ALL)
ZMK_COMBO(hash, &kp HASH, LT1 LT0, ALL)
ZMK_COMBO(dot2, &kp DOT, LB3 LB2 LB1, ALL)

// Steno Macros

ZMK_BEHAVIOR(m_the, macro,
      wait-ms = <0>;
      tap-ms = <10>;
      bindings = <&kp T &kp H &kp E &kp SPACE>;
)

ZMK_BEHAVIOR(m_and, macro,
      wait-ms = <0>;
      tap-ms = <10>;
      bindings = <&kp A &kp N &kp D &kp SPACE>;
)

ZMK_BEHAVIOR(m_you, macro,
      wait-ms = <0>;
      tap-ms = <10>;
      bindings = <&kp Y &kp O &kp U &kp SPACE>;
)

ZMK_BEHAVIOR(m_that, macro,
      wait-ms = <0>;
      tap-ms = <10>;
      bindings = <&kp T &kp H &kp A &kp &kp T SPACE>;
)

// Steno Combos
ZMK_COMBO(THE, &m_the,  LM1 LH0, ALL)
ZMK_COMBO(AND, &m_and,  LM4 LH0, ALL)
ZMK_COMBO(YOU, &m_you,  RH0 RT3, ALL)
ZMK_COMBO(THAT, &m_that,  LM1 RB1 RH0, ALL)

// Tap dance

ZMK_BEHAVIOR(qu, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp QUESTION>, <&kp EXCLAMATION>;
)

ZMK_BEHAVIOR(z_undo, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp Z>, <&kp LC(Z)>;
)

ZMK_BEHAVIOR(ap_qo, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp APOSTROPHE>, <&kp DOUBLE_QUOTES>;
)

ZMK_BEHAVIOR(at, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp AT_SIGN>, <&kp AMPERSAND>;
)

ZMK_BEHAVIOR(sla, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp SLASH>, <&kp BACKSLASH>;
)

ZMK_BEHAVIOR(par, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp LPAR>, <&kp RPAR>;
)

ZMK_BEHAVIOR(br, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
)

ZMK_BEHAVIOR(hyph, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp MINUS>, <&kp UNDERSCORE>, <&kp TILDE>;
)

ZMK_BEHAVIOR(dol, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp DOLLAR>, <&kp CARET>, <&kp PIPE>;
)

/* Caps-word, num-word and smart-mouse */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

// Alt+Tab swapper, requires PR #1366
ZMK_BEHAVIOR(swapper, tri_state,
    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
    ignored-key-positions = <LT2>;
)

// tap: num-word | double-tap: sticky num-layer | hold: num-layer
#define SMART_NUM &smart_num NUM 0
ZMK_BEHAVIOR(smart_num, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)

ZMK_BEHAVIOR(num_dance, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word>, <&sl NUM>;  // reverse this for sticky-num on single tap
)
&num_word {  // num-word, requires PR #1451
    layers = <NUM>;
    continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL UP DOWN RIGHT LEFT SEMICOLON COLON TAB>;
};

/* keymap */

ZMK_LAYER(base,
// 	╭────────────────────────┬────────────────────────┬────────────────────────┬────────────────────────┬────────────────────────╮    ╭────────────────────────┬────────────────────────┬────────────────────────┬───────────────────────┬────────────────────────╮
    ___	   &kp Q                    &kp W                    &kp F                    &kp P                    &kp B                         &kp J                    &kp L                    &kp U                    &kp Y                    &qu                    ___
//	├────────────────────────┼────────────────────────┼────────────────────────┼────────────────────────┼────────────────────────┤    ├────────────────────────┼────────────────────────┼────────────────────────┼───────────────────────┼────────────────────────┤
    ___	   &hrm LGUI A              &hrm LALT R              &hrm LCTRL S             &hrm LSHFT T             &kp G                         &kp M                    &hrm RSHFT N             &hrm RCTRL E             &hrm LALT I              &hrm RGUI O            ___
// 	├────────────────────────┼────────────────────────┼────────────────────────┼────────────────────────┼────────────────────────┤    ├────────────────────────┼────────────────────────┼────────────────────────┼───────────────────────┼────────────────────────┤
    ___    &z_undo                  &kp X                    &kp C                    &kp D                    &kp V                         &kp K                    &kp H                    &ap_qo                   &at                      &hyph                  ___
// 	╰────────────────────────┴────────────────────────┴────────────────────────┴────────────────────────┼────────────────────────┤    ├────────────────────────┼────────────────────────┼────────────────────────┴───────────────────────┴────────────────────────╯
                                                      	     NAV_DEL                 SMART_NUM                 &kp SPACE                     NAV_BSPC                 &kp ENTER                &lt FUN DEL
//                                             	      ╰────────────────────────┴────────────────────────┴────────────────────────╯    ╰────────────────────────┴────────────────────────┴────────────────────────╯
)

ZMK_LAYER(num,
// 	╭────────────────────────┬────────────────────────┬────────────────────────┬────────────────────────┬────────────────────────╮    ╭────────────────────────┬────────────────────────┬────────────────────────┬───────────────────────┬────────────────────────╮
   ___    &kp PERCENT               &kp N1                   &kp N2                  &kp N3                   &kp MINUS                     ___                       ___                      ___                     ___                     ___                      ___
// 	├────────────────────────┼────────────────────────┼────────────────────────┼────────────────────────┼────────────────────────┤    ├────────────────────────┼────────────────────────┼────────────────────────┼───────────────────────┼────────────────────────┤
   ___    &kp N0                    &kp N4                   &kp N5                  &kp N6                   &kp PLUS                      ___                       ___                      ___                     ___                     ___                      ___
// 	├────────────────────────┼────────────────────────┼────────────────────────┼────────────────────────┼────────────────────────┤    ├────────────────────────┼────────────────────────┼────────────────────────┼───────────────────────┼────────────────────────┤
   ___    &dol                      &kp N7                   &kp N8                  &kp N9                   &kp EQUAL                     ___                       ___                      ___                     ___                     ___                      ___
// 	╰────────────────────────┴────────────────────────┴────────────────────────┼────────────────────────┼────────────────────────┤    ├────────────────────────┼────────────────────────┼────────────────────────┴───────────────────────┴────────────────────────╯
                                                            ___                      ___                      ___                           ___                       ___                      ___ 
//                                                 	  ╰────────────────────────┴────────────────────────┴────────────────────────╯    ╰────────────────────────┴────────────────────────┴────────────────────────╯
)

ZMK_LAYER(fun,            
//	 ╭────────────────────────┬────────────────────────┬────────────────────────┬────────────────────────┬────────────────────────╮    ╭────────────────────────┬────────────────────────┬────────────────────────┬───────────────────────┬────────────────────────╮
    ___    ___                       &kp F1                   &kp F2                  &kp F3                   &kp F4                        &bt BT_CLR                &bt BT_SEL 1             &bt BT_SEL 2             &bt BT_SEL 3            &bt BT_SEL 4            ___
//	 ├────────────────────────┼────────────────────────┼────────────────────────┼────────────────────────┼────────────────────────┤    ├────────────────────────┼────────────────────────┼────────────────────────┼───────────────────────┼────────────────────────┤
    ___    ___                       &kp F5                   &kp F6                  &kp F7                   &kp F8                        ___                       &out OUT_USB             &out OUT_BLE             ___                     ___                     ___
//	 ├────────────────────────┼────────────────────────┼────────────────────────┼────────────────────────┼────────────────────────┤    ├────────────────────────┼────────────────────────┼────────────────────────┼───────────────────────┼────────────────────────┤
    ___    ___                       &kp F9                   &kp F10                 &kp F11                  &kp F12                       ___                       ___                      ___                      ___                     ___                     ___
//	 ╰────────────────────────┴────────────────────────┴────────────────────────┼────────────────────────┼────────────────────────┤    ├────────────────────────┼────────────────────────┼────────────────────────┴───────────────────────┴────────────────────────╯
                                                             ___                      ___                      ___                           ___                       ___                      ___ 
//                                             	       ╰────────────────────────┴────────────────────────┴────────────────────────╯    ╰────────────────────────┴────────────────────────┴────────────────────────╯
)
